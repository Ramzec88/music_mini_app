import { google } from 'googleapis';

// –ü–∞—Ä—Å–∏–º JSON –∏–∑ GOOGLE_PRIVATE_KEY
// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GOOGLE_PRIVATE_KEY –Ω–∞ Vercel —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç
// —Å –ø–æ–ª—è–º–∏ "private_key" (—Å \\n –≤–º–µ—Å—Ç–æ \n) –∏ "client_email"
const credentials = JSON.parse(process.env.GOOGLE_PRIVATE_KEY);

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ \\n –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π \n
const privateKey = credentials.private_key.replace(/\\n/g, '\n');
const clientEmail = credentials.client_email; // –ò—Å–ø–æ–ª—å–∑—É–µ–º client_email –∏–∑ JSON

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ JWT
const auth = new google.auth.JWT(
  clientEmail,
  null,
  privateKey,
  ['https://www.googleapis.com/auth/spreadsheets'] // –û–±–ª–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏
);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets API
const sheets = google.sheets({ version: 'v4', auth });

export default async function handler(req, res) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–≤–∫–ª—é—á–∞—è Telegram)
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ req.body
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º sheetName –≤–º–µ—Å—Ç–æ sheet –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è frontend
    const { action, sheetName, range, values, searchValue, updateRange, updateValue } = req.body;
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    console.log('üìù API Request:', { 
      action, 
      sheetName, 
      range, 
      searchValue, 
      updateRange, 
      timestamp: new Date().toISOString()
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è SPREADSHEET_ID
    const SPREADSHEET_ID = process.env.GOOGLE_SPREADSHEET_ID;
    if (!SPREADSHEET_ID) {
      console.error('‚ùå Missing GOOGLE_SPREADSHEET_ID environment variable');
      return res.status(500).json({ 
        error: 'Server configuration error',
        details: 'Missing GOOGLE_SPREADSHEET_ID',
        solution: 'Add GOOGLE_SPREADSHEET_ID in Vercel Dashboard'
      });
    }

    switch (action) {
      case 'get': {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (!sheetName) {
          return res.status(400).json({ error: 'Missing required parameter: sheetName for get action' });
        }
        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: –µ—Å–ª–∏ range –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º –≤–µ—Å—å –ª–∏—Å—Ç
        const targetRange = range ? `${sheetName}!${range}` : sheetName; 

        try {
          const response = await sheets.spreadsheets.values.get({
            spreadsheetId: SPREADSHEET_ID,
            range: targetRange,
          });
          console.log('‚úÖ GET response successful:', { 
            range: response.data.range, 
            rowCount: response.data.values ? response.data.values.length : 0 
          });
          return res.status(200).json(response.data);
        } catch (error) {
          console.error('GET Error:', error);
          return handleGoogleApiError(error, res);
        }
      }

      case 'find': {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (!sheetName || searchValue === undefined) { // searchValue –º–æ–∂–µ—Ç –±—ã—Ç—å 0
          return res.status(400).json({ error: 'Missing required parameters: sheetName or searchValue for find action' });
        }
        // –î–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ–≥–¥–∞ –±–µ—Ä–µ–º –≤–µ—Å—å –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –ª–∏—Å—Ç–∞
        const searchRange = `${sheetName}!A:A`; 

        try {
          const response = await sheets.spreadsheets.values.get({
            spreadsheetId: SPREADSHEET_ID,
            range: searchRange, 
          });
          
          const rows = response.data.values || [];
          const foundRow = rows.find((row) => row[0] === searchValue);
          
          if (foundRow) {
            const rowIndex = rows.indexOf(foundRow) + 1; // –ü–æ–ª—É—á–∞–µ–º 1-–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
            console.log('‚úÖ FIND result: found at row', rowIndex);
            return res.status(200).json({ found: true, rowIndex: rowIndex, rowData: foundRow });
          } else {
            console.log('‚ùå FIND result: not found');
            return res.status(200).json({ found: false });
          }
        } catch (error) {
          console.error('FIND Error:', error);
          return handleGoogleApiError(error, res);
        }
      }

      case 'append': {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (!sheetName || !values) {
          return res.status(400).json({ error: 'Missing required parameters: sheetName or values for append action' });
        }
        // values –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ –º–∞—Å—Å–∏–≤, –Ω–æ –≤–∞—à frontend test_sheets.html –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –∫–∞–∫ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        // –ü–æ—ç—Ç–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º:
        const appendValues = Array.isArray(values) ? values : values.split(',').map(s => s.trim());

        try {
          const response = await sheets.spreadsheets.values.append({
            spreadsheetId: SPREADSHEET_ID,
            range: sheetName, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –≤–µ—Å—å –ª–∏—Å—Ç
            valueInputOption: 'RAW',
            insertDataOption: 'INSERT_ROWS',
            resource: {
              values: [appendValues], // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            },
          });
          console.log('‚úÖ APPEND response successful:', response.data);
          return res.status(200).json(response.data);
        } catch (error) {
          console.error('APPEND Error:', error);
          return handleGoogleApiError(error, res);
        }
      }

      case 'update': {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (!sheetName || !updateRange || updateValue === undefined) { // updateValue –º–æ–∂–µ—Ç –±—ã—Ç—å 0 –∏–ª–∏ false
          return res.status(400).json({ error: 'Missing required parameters: sheetName, updateRange, or updateValue for update action' });
        }
        // updateRange –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ A1 (–Ω–∞–ø—Ä–∏–º–µ—Ä, "B2")
        const targetRange = `${sheetName}!${updateRange}`;

        try {
          const response = await sheets.spreadsheets.values.update({
            spreadsheetId: SPREADSHEET_ID,
            range: targetRange,
            valueInputOption: 'RAW',
            resource: {
              values: [[updateValue]], // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏
            },
          });
          console.log('‚úÖ UPDATE response successful:', response.data);
          return res.status(200).json(response.data);
        } catch (error) {
          console.error('UPDATE Error:', error);
          return handleGoogleApiError(error, res);
        }
      }

      case 'test-write-permissions': {
        // –≠—Ç–æ—Ç action –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏
        if (!sheetName) { // –î–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã sheetName
          return res.status(400).json({ error: 'Missing required parameter: sheetName for test-write-permissions action' });
        }
        const testRange = `${sheetName}!Z1000`; // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∏–∫—Ç–∏–≤–Ω—É—é —è—á–µ–π–∫—É
        
        try {
          await sheets.spreadsheets.values.update({
            spreadsheetId: SPREADSHEET_ID,
            range: testRange,
            valueInputOption: 'RAW',
            resource: {
              values: [['test_write_permission']],
            },
          });

          // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —è—á–µ–π–∫—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —Ö–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞)
          await sheets.spreadsheets.values.clear({
            spreadsheetId: SPREADSHEET_ID,
            range: testRange,
          });
          
          return res.status(200).json({
            canRead: true, 
            canWrite: true,
            writeError: null,
            recommendations: ['Write permissions are working correctly.']
          });

        } catch (error) {
          console.error('TEST-WRITE-PERMISSIONS Error:', error);
          let writeErrorDetails = 'Unknown error';
          if (error.response && error.response.data && error.response.data.error) {
            writeErrorDetails = error.response.data.error.message;
          } else if (error.message) {
            writeErrorDetails = error.message;
          }
          
          return res.status(403).json({ // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 403 Forbidden, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤
            canRead: true, 
            canWrite: false,
            writeError: writeErrorDetails,
            recommendations: [
              'Share the Google Sheet with the Service Account email (Editor role).',
              'Ensure Google Sheets API is enabled in Google Cloud Console.'
            ]
          });
        }
      }

      default:
        console.error('‚ùå Invalid action:', action);
        return res.status(400).json({ 
          error: 'Invalid action', 
          validActions: ['get', 'append', 'update', 'find', 'test-write-permissions'],
          receivedAction: action
        });
    }
    
  } catch (error) {
    console.error('‚ùå General API Error in handler:', error);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userError = 'Internal server error';
    let statusCode = 500;
    let solutions = [];
    
    // –ë–æ–ª–µ–µ –æ–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (error.message.includes('GOOGLE_PRIVATE_KEY') || error.message.includes('client_email')) {
      userError = 'Server configuration error: Service Account credentials missing or invalid';
      solutions = ['Ensure GOOGLE_PRIVATE_KEY environment variable is set correctly (full JSON with \\n escaped).'];
    } else if (error.message.includes('401')) { 
      userError = 'Authentication failed with Google Sheets API';
      statusCode = 401;
      solutions = [
        'Check if Service Account email in GOOGLE_PRIVATE_KEY is correct',
        'Verify private key is correctly formatted (especially \\n)',
        'Ensure Google Sheets API is enabled in Google Cloud Console'
      ];
    } else if (error.message.includes('403')) {
      userError = 'Access denied to Google Sheets';
      statusCode = 403;
      solutions = [
        'Share the spreadsheet with the Service Account email (Editor role)',
        'Check if Google Sheets API is enabled in Google Cloud Console'
      ];
    } else if (error.message.includes('404')) {
      userError = 'Spreadsheet or sheet not found';
      statusCode = 404;
      solutions = [
        'Verify SPREADSHEET_ID is correct in Vercel',
        'Check if sheet names exist in spreadsheet',
        'Ensure spreadsheet is not deleted'
      ];
    } else if (error.message.includes('Failed to fetch')) {
      userError = 'Cannot connect to Google Sheets API';
      statusCode = 502;
      solutions = [
        'Check internet connectivity from Vercel environment (less likely for Vercel)',
        'Verify Google Sheets API endpoint is accessible',
        'Try again in a few moments'
      ];
    } else if (error.message.includes('JSON.parse')) {
      userError = 'Invalid JSON format for GOOGLE_PRIVATE_KEY';
      solutions = ['Ensure GOOGLE_PRIVATE_KEY is a valid JSON string.'];
    }
    
    return res.status(statusCode).json({ 
      error: userError,
      details: error.message,
      solutions: solutions,
      timestamp: new Date().toISOString()
    });
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Google API
function handleGoogleApiError(error, res) {
  let statusCode = 500;
  let userError = 'Internal Google Sheets API error';
  let details = error.message;
  let solutions = [];

  if (error.response && error.response.status) {
    statusCode = error.response.status;
    if (error.response.data && error.response.data.error) {
      details = error.response.data.error.message;
    }
  }

  if (statusCode === 401) {
    userError = 'Authentication failed with Service Account';
    solutions = [
      'Check Service Account email in GOOGLE_PRIVATE_KEY is correct.',
      'Verify private key is correctly formatted (especially \\n).'
    ];
  } else if (statusCode === 403) {
    userError = 'Access denied to Google Sheet';
    solutions = [
      'Share the Google Sheet with the Service Account email (Editor role).',
      'Ensure Google Sheets API is enabled in Google Cloud Console.'
    ];
  } else if (statusCode === 404) {
    userError = 'Spreadsheet or sheet not found';
    solutions = [
      'Verify SPREADSHEET_ID in Vercel is correct.',
      'Check if sheet name exists in your spreadsheet.'
    ];
  } else if (statusCode === 429) {
    userError = 'Too many requests to Google Sheets API';
    solutions = ['Reduce request frequency or increase Google Cloud quota.'];
  }

  return res.status(statusCode).json({
    error: userError,
    details: details,
    solutions: solutions,
    timestamp: new Date().toISOString()
  });
}
