// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π script.js —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π URL
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—ç–∫–µ–Ω–¥–∞
const BACKEND_URL = 'https://script.google.com/macros/s/AKfycbyeucdkcWx77xVXOOZ3qdNjNPerPISwMeBNlvlZif2aRJmseUS4orglZxDJmVqOlJf-Yw/exec';
const DEFAULT_SONG_URL = 'assets/song.mp3'; // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
const BASE_APP_URL = 'https://music-mini-app-omega.vercel.app/gift/';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞
let giftData = {
  recipientName: '–ê–ª–µ–∫—Å–µ–π',
  occasion: '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
  personalMessage: '–ê–ª–µ–∫—Å–µ–π, –ø—É—Å—Ç—å —ç—Ç–æ—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –º–æ—Ä–µ —Ä–∞–¥–æ—Å—Ç–∏ –∏ –ø—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω –º—É–∑—ã–∫–æ–π –∏ —Å–º–µ—Ö–æ–º! üéà‚ú®',
  songUrl: DEFAULT_SONG_URL,
  found: false
};

// Initialize Lottie animation with fallback
let envelope;
try {
  envelope = lottie.loadAnimation({
    container: document.getElementById('envelope'),
    renderer: 'svg',
    loop: false,
    autoplay: false,
    path: 'assets/envelope_open.json'
  });
} catch (error) {
  console.log('Lottie failed to load, using fallback');
  document.getElementById('envelope').innerHTML = `
    <div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; font-size: 120px; background: linear-gradient(135deg, #fdd39e, #fbb47a); border-radius: 25px; box-shadow: 0 15px 35px rgba(0,0,0,0.2); transition: all 0.3s ease;">
      üíå
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞
async function loadGiftData() {
  const urlParams = new URLSearchParams(window.location.search);
  const giftCode = urlParams.get('code');
  
  if (!giftCode) {
    console.log('No gift code found, using default data');
    updateUIWithGiftData();
    return;
  }

  try {
    console.log('Loading gift data for code:', giftCode);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingState();
    
    const response = await fetch(`${BACKEND_URL}?action=getGift&code=${giftCode}`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    
    if (data.error) {
      throw new Error(data.error);
    }
    
    if (data.found) {
      giftData = {
        ...data,
        found: true
      };
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      incrementViewCount(giftCode);
      
      console.log('Gift data loaded successfully:', giftData);
    } else {
      console.log('Gift not found, using default data');
      showGiftNotFoundError();
    }
    
  } catch (error) {
    console.error('Error loading gift data:', error);
    showErrorState(error.message);
  } finally {
    updateUIWithGiftData();
    hideLoadingState();
  }
}

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
async function incrementViewCount(giftCode) {
  try {
    await fetch(`${BACKEND_URL}?action=incrementViews&code=${giftCode}`);
  } catch (error) {
    console.error('Error incrementing view count:', error);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞
function updateUIWithGiftData() {
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  const titleElement = document.querySelector('#song-card h2');
  if (titleElement && giftData.recipientName) {
    const occasionEmoji = getOccasionEmoji(giftData.occasion);
    titleElement.textContent = `${occasionEmoji} ${getOccasionTitle(giftData.occasion)}, ${giftData.recipientName}!`;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
  const descriptionElement = document.querySelector('#song-card p');
  if (descriptionElement) {
    descriptionElement.textContent = getOccasionDescription(giftData.occasion);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const messageElement = document.querySelector('.greeting-text');
  if (messageElement && giftData.personalMessage) {
    messageElement.textContent = giftData.personalMessage;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫
  const audioElement = document.getElementById('audio');
  const downloadLink = document.getElementById('download-link');
  
  if (audioElement && giftData.songUrl && giftData.songUrl !== DEFAULT_SONG_URL) {
    audioElement.src = giftData.songUrl;
    
    if (downloadLink) {
      downloadLink.href = giftData.songUrl;
      downloadLink.download = `${giftData.recipientName || '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è'}_–ø–µ—Å–Ω—è.mp3`;
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≤–æ–¥–∞ (–≤–∫–ª—é—á–∞—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ)
function getOccasionEmoji(occasion) {
  const emojis = {
    '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è': 'üéâ',
    '–ù–æ–≤—ã–π –≥–æ–¥': 'üéÑ',
    '–ì–æ–¥–æ–≤—â–∏–Ω–∞': 'üíù',
    '8 –º–∞—Ä—Ç–∞': 'üåπ',
    '–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞': 'üíï',
    '–ü—Ä–æ—Å—Ç–æ —Ç–∞–∫': '‚ú®',
    '–°–≤–∞–¥—å–±–∞': 'üíí',
    '–í—ã–ø—É—Å–∫–Ω–æ–π': 'üéì'
  };
  // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–≤–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–º–æ–¥–∑–∏
  return emojis[occasion] || 'üéä';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –ø–æ–≤–æ–¥–∞ (–≤–∫–ª—é—á–∞—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ)
function getOccasionTitle(occasion) {
  const titles = {
    '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è': '–° –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è',
    '–ù–æ–≤—ã–π –≥–æ–¥': '–° –ù–æ–≤—ã–º –ì–æ–¥–æ–º',
    '–ì–æ–¥–æ–≤—â–∏–Ω–∞': '–° –ì–æ–¥–æ–≤—â–∏–Ω–æ–π',
    '8 –º–∞—Ä—Ç–∞': '–° 8 –ú–∞—Ä—Ç–∞',
    '–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞': '–° –î–Ω—ë–º –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞',
    '–ü—Ä–æ—Å—Ç–æ —Ç–∞–∫': '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è',
    '–°–≤–∞–¥—å–±–∞': '–° –î–Ω—ë–º –°–≤–∞–¥—å–±—ã',
    '–í—ã–ø—É—Å–∫–Ω–æ–π': '–° –í—ã–ø—É—Å–∫–Ω—ã–º'
  };
  // –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–≤–æ–¥–æ–≤ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  return titles[occasion] || `–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å ${occasion}`;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–≤–æ–¥–∞ (–≤–∫–ª—é—á–∞—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ)
function getOccasionDescription(occasion) {
  const descriptions = {
    '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è': '–≠—Ç–∞ –ø–µ—Å–Ω—è —Å–æ–∑–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è! –ù–∞—Å–ª–∞–¥–∏—Å—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π üé∂',
    '–ù–æ–≤—ã–π –≥–æ–¥': '–í—Å—Ç—Ä–µ—á–∞–π –ù–æ–≤—ã–π –≥–æ–¥ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Å–Ω–µ–π! –ü—É—Å—Ç—å –æ–Ω–∞ –ø—Ä–∏–Ω–µ—Å—ë—Ç —É–¥–∞—á—É üé∂',
    '–ì–æ–¥–æ–≤—â–∏–Ω–∞': '–í —á–µ—Å—Ç—å –≤–∞—à–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –¥–Ω—è —Å–æ–∑–¥–∞–Ω–∞ —ç—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è üé∂',
    '8 –º–∞—Ä—Ç–∞': '–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Å–Ω–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è üé∂',
    '–î–µ–Ω—å –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞': '–ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –≤ –ª—é–±–≤–∏ —Å–æ–∑–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è üé∂',
    '–ü—Ä–æ—Å—Ç–æ —Ç–∞–∫': '–≠—Ç–∞ –ø–µ—Å–Ω—è —Å–æ–∑–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ä–∏—Ç—å —É–ª—ã–±–∫—É üé∂',
    '–°–≤–∞–¥—å–±–∞': '–ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —Å–∞–º—ã–º –≤–∞–∂–Ω—ã–º –¥–Ω—ë–º –≤ –∂–∏–∑–Ω–∏ üé∂',
    '–í—ã–ø—É—Å–∫–Ω–æ–π': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è –≤ —á–µ—Å—Ç—å —Ç–≤–æ–µ–≥–æ –≤—ã–ø—É—Å–∫–Ω–æ–≥–æ! üé∂'
  };
  // –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–≤–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  return descriptions[occasion] || `–≠—Ç–∞ –ø–µ—Å–Ω—è —Å–æ–∑–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è! –ù–∞—Å–ª–∞–¥–∏—Å—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π üé∂`;
}

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
function showLoadingState() {
  const mainContent = document.querySelector('.main-content');
  if (mainContent) {
    const loadingDiv = document.createElement('div');
    loadingDiv.id = 'loading-state';
    loadingDiv.innerHTML = `
      <div style="text-align: center; padding: 10px;">
        <div style="font-size: 48px; margin-bottom: 10px;">üéµ</div>
        <h3 style="color: var(--text-color); margin-bottom: 7px;">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫...</h3>
        <p style="color: var(--text-secondary-color);">–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ</p>
      </div>
    `;
    mainContent.appendChild(loadingDiv);
  }
}

function hideLoadingState() {
  const loadingState = document.getElementById('loading-state');
  if (loadingState) {
    loadingState.remove();
  }
}

function showErrorState(errorMessage) {
  const mainContent = document.querySelector('.main-content');
  if (mainContent) {
    const errorDiv = document.createElement('div');
    errorDiv.id = 'error-state';
    errorDiv.innerHTML = `
      <div style="text-align: center; padding: 20px; color: var(--text-color);">
        <div style="font-size: 48px; margin-bottom: 20px;">üòî</div>
        <h3 style="margin-bottom: 10px;">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫</h3>
        <p style="color: var(--text-secondary-color); margin-bottom: 20px;">${errorMessage}</p>
        <button onclick="location.reload()" style="background: var(--btn-gradient); color: white; border: none; padding: 10px 20px; border-radius: 25px; cursor: pointer;">
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    `;
    mainContent.appendChild(errorDiv);
  }
}

function showGiftNotFoundError() {
  const mainContent = document.querySelector('.main-content');
  if (mainContent) {
    const errorDiv = document.createElement('div');
    errorDiv.id = 'error-state';
    errorDiv.innerHTML = `
      <div style="text-align: center; padding: 20px; color: var(--text-color);">
        <div style="font-size: 48px; margin-bottom: 20px;">üîç</div>
        <h3 style="margin-bottom: 10px;">–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</h3>
        <p style="color: var(--text-secondary-color); margin-bottom: 20px;">
          –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É
        </p>
        <button onclick="showDefaultGift()" style="background: var(--btn-gradient); color: white; border: none; padding: 10px 20px; border-radius: 25px; cursor: pointer;">
          –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ
        </button>
      </div>
    `;
    mainContent.appendChild(errorDiv);
  }
}

function showDefaultGift() {
  const errorState = document.getElementById('error-state');
  if (errorState) {
    errorState.remove();
  }
}

// Window load effect
window.addEventListener('load', () => {
  document.getElementById('envelope').style.transform = 'scale(0.95)';
  setTimeout(() => {
    document.getElementById('envelope').style.transform = 'scale(1)';
  }, 400);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∞
  loadGiftData();
});

// State variables
let isOpen = false;
let isPlaying = false;
const songCard = document.getElementById('song-card');
const audio = document.getElementById('audio');
const playBtn = document.getElementById('play-btn');
const openBtn = document.getElementById('open-btn');
const closeBtn = document.getElementById('close-btn');
const waveAnimation = document.getElementById('wave-animation');

// Theme switching functionality
const themeToggle = document.getElementById('theme-toggle');
const themeSwitcher = document.getElementById('theme-switcher');
const applyThemeBtn = document.getElementById('apply-theme');
const peachOption = document.querySelector('[data-theme="peach"]');
const cosmicOption = document.querySelector('[data-theme="cosmic"]');
const peachPreview = document.querySelector('.peach-preview');
const cosmicPreview = document.querySelector('.cosmic-preview');

// Initialize theme state
let currentTheme = 'peach';

function updateThemeUI() {
  if (currentTheme === 'peach') {
    peachOption.classList.add('active');
    cosmicOption.classList.remove('active');
    peachPreview.classList.add('active');
    cosmicPreview.classList.remove('active');
    themeToggle.checked = false;
  } else {
    cosmicOption.classList.add('active');
    peachOption.classList.remove('active');
    cosmicPreview.classList.add('active');
    peachPreview.classList.remove('active');
    themeToggle.checked = true;
  }
}

function applyTheme(theme) {
  if (theme === 'cosmic') {
    document.body.classList.add('cosmic-theme');
  } else {
    document.body.classList.remove('cosmic-theme');
  }
  currentTheme = theme;
  updateThemeUI();
  updateConfettiColors();
}

function updateConfettiColors() {
  if (currentTheme === 'cosmic') {
    window.confettiColors = ['#667eea', '#764ba2', '#f093fb', '#ffffff', '#e0c3fc'];
  } else {
    window.confettiColors = ['#fdd39e', '#fbb47a', '#f46b8a', '#e64d6e', '#ffffff'];
  }
}

// Theme toggle event listener
themeToggle.addEventListener('change', () => {
  applyTheme(themeToggle.checked ? 'cosmic' : 'peach');
});

// Theme preview click handlers
peachPreview.addEventListener('click', () => {
  applyTheme('peach');
});

cosmicPreview.addEventListener('click', () => {
  applyTheme('cosmic');
});

// Apply and hide theme switcher
applyThemeBtn.addEventListener('click', () => {
  themeSwitcher.classList.add('hidden');
  localStorage.setItem('gift-theme', currentTheme);
  
  const originalText = applyThemeBtn.textContent;
  applyThemeBtn.textContent = '‚ú® –¢–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!';
  setTimeout(() => {
    applyThemeBtn.textContent = originalText;
  }, 2000);
});

// Show theme switcher on double click (only if not locked)
document.addEventListener('dblclick', (e) => {
  if (e.ctrlKey || e.metaKey) {
    const isThemeLocked = localStorage.getItem('theme-locked') === 'true';
    if (!isThemeLocked) {
      themeSwitcher.classList.remove('hidden');
    } else {
      console.log('Theme is locked - cannot change theme');
    }
  }
});

// Initialize theme from URL parameter or localStorage
function initializeTheme() {
  const urlParams = new URLSearchParams(window.location.search);
  const urlTheme = urlParams.get('theme');
  const savedTheme = localStorage.getItem('gift-theme');
  const isThemeLocked = urlParams.get('locked') === 'true' || localStorage.getItem('theme-locked') === 'true';
  
  // Priority: URL > localStorage > default
  const initialTheme = urlTheme || savedTheme || 'peach';
  applyTheme(initialTheme);
  
  // If theme is locked, hide the theme switcher immediately
  if (isThemeLocked) {
    themeSwitcher.classList.add('hidden');
    localStorage.setItem('theme-locked', 'true');
    console.log('Theme locked:', initialTheme);
  } else {
    // Auto-hide theme switcher after 10 seconds if no interaction
    setTimeout(() => {
      if (!themeSwitcher.classList.contains('hidden')) {
        themeSwitcher.style.opacity = '0.7';
      }
    }, 10000);
  }
}

// Create enhanced floating particles
function createParticles() {
  const particles = document.getElementById('particles');
  for (let i = 0; i < 60; i++) {
    const particle = document.createElement('div');
    particle.className = 'particle';
    particle.style.left = Math.random() * 100 + '%';
    particle.style.top = Math.random() * 100 + '%';
    particle.style.animationDelay = Math.random() * 8 + 's';
    particle.style.animationDuration = (Math.random() * 4 + 4) + 's';
    particles.appendChild(particle);
  }
}

// Enhanced confetti celebration
function celebrationEffect() {
  const duration = 1800;
  const animationEnd = Date.now() + duration;
  const colors = window.confettiColors || ['#fdd39e', '#fbb47a', '#f46b8a', '#e64d6e', '#ffffff'];
  
  const defaults = { 
    startVelocity: 45,
    spread: 360, 
    ticks: 100,
    zIndex: 999,
    colors: colors,
    gravity: 1.0,
    scalar: 1.2
  };

  function randomInRange(min, max) {
    return Math.random() * (max - min) + min;
  }

  function initialBurst() {
    const count = 120;
    confetti(Object.assign({}, defaults, {
      particleCount: count,
      spread: 100,
      origin: { x: 0.5, y: 0.6 }
    }));
  }

  const interval = setInterval(function() {
    const timeLeft = animationEnd - Date.now();

    if (timeLeft <= 0) {
      return clearInterval(interval);
    }

    const particleCount = 60 * (timeLeft / duration);

    confetti(Object.assign({}, defaults, {
      particleCount: particleCount,
      spread: 80,
      origin: { x: randomInRange(0.1, 0.3), y: randomInRange(0.5, 0.7) }
    }));
    confetti(Object.assign({}, defaults, {
      particleCount: particleCount,
      spread: 80,
      origin: { x: randomInRange(0.7, 0.9), y: randomInRange(0.5, 0.7) }
    }));
    
    if (timeLeft > duration * 0.5) {
      confetti(Object.assign({}, defaults, {
        particleCount: particleCount * 1.5,
        spread: 120,
        origin: { x: randomInRange(0.4, 0.6), y: randomInRange(0.4, 0.6) }
      }));
    }
  }, 300);

  initialBurst();
  setTimeout(() => initialBurst(), 600);
}

// Open envelope with enhanced animation
openBtn.addEventListener('click', () => {
  if (!isOpen) {
    openBtn.classList.add('loading');
    openBtn.textContent = '‚ú® –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...';
    openBtn.disabled = true;

    if (envelope && envelope.totalFrames) {
      envelope.play();
      envelope.addEventListener('complete', showSongCard, { once: true });
    } else {
      const envelopeEl = document.getElementById('envelope');
      envelopeEl.style.transform = 'rotateY(180deg) scale(1.1)';
      setTimeout(showSongCard, 800);
    }
  } else {
    closeSongCard();
  }
});

function showSongCard() {
  isOpen = true;
  
  celebrationEffect();
  
  setTimeout(() => {
    songCard.classList.remove('hidden');
    setTimeout(() => songCard.classList.add('show'), 50);
  }, 1500);
  
  setTimeout(() => {
    openBtn.classList.remove('loading');
    openBtn.textContent = 'üîí –ó–∞–∫—Ä—ã—Ç—å –ø–æ–¥–∞—Ä–æ–∫';
    openBtn.disabled = false;
  }, 2000);
}

function closeSongCard() {
  console.log('Closing song card...');
  songCard.classList.remove('show');
  setTimeout(() => {
    songCard.classList.add('hidden');
    isOpen = false;
    openBtn.textContent = 'üéµ –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–∞—Ä–æ–∫';
    
    document.getElementById('envelope').style.transform = 'rotateY(0deg) scale(1)';
    
    if (isPlaying) {
      audio.pause();
      audio.currentTime = 0;
      isPlaying = false;
      playBtn.textContent = '‚ñ∂Ô∏è';
      waveAnimation.classList.remove('playing');
    }
  }, 500);
}

songCard.addEventListener('click', (e) => {
  if (e.target === songCard) {
    closeSongCard();
  }
});

// Enhanced play/pause functionality
playBtn.addEventListener('click', () => {
  if (audio.paused) {
    audio.play().then(() => {
      isPlaying = true;
      playBtn.textContent = '‚è∏Ô∏è';
      waveAnimation.classList.add('playing');
    }).catch(error => {
      console.log('Audio play failed:', error);
      playBtn.textContent = '‚ùå';
      setTimeout(() => {
        playBtn.textContent = '‚ñ∂Ô∏è';
      }, 2000);
    });
  } else {
    audio.pause();
    isPlaying = false;
    playBtn.textContent = '‚ñ∂Ô∏è';
    waveAnimation.classList.remove('playing');
  }
});

// Audio event handlers
audio.addEventListener('ended', () => {
  isPlaying = false;
  playBtn.textContent = 'üîÅ';
  waveAnimation.classList.remove('playing');
});

// Share functionality using existing modal in HTML
const shareModal = document.getElementById('share-modal');
const shareOptionsContainer = document.getElementById('share-options');
const shareModalCloseBtn = document.getElementById('share-modal-close-btn');
const shareBtn = document.getElementById('share-btn');

shareBtn.addEventListener('click', async () => {
  const shareUrl = generateShareUrl();
  const shareData = {
    title: 'üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫!',
    text: `–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫–æ–π –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ —É –º–µ–Ω—è! –≠—Ç–æ –º–æ—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–µ—Å–Ω—è! üéµ‚ú®`,
    url: shareUrl
  };

  if (navigator.share && navigator.canShare && navigator.canShare(shareData)) {
    try {
      await navigator.share(shareData);
      
      localStorage.setItem('theme-locked', 'true');
      themeSwitcher.classList.add('hidden');
      
      const originalText = shareBtn.innerHTML;
      shareBtn.innerHTML = '<span>‚úÖ</span><span>–ü–æ–¥–µ–ª–∏–ª—Å—è!</span>';
      setTimeout(() => {
        shareBtn.innerHTML = originalText;
      }, 2000);
    } catch (err) {
      if (err.name !== 'AbortError') {
        showFallbackShareModal();
      }
    }
  } else {
    showFallbackShareModal();
  }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
function generateShareUrl() {
  const urlParams = new URLSearchParams(window.location.search);
  const giftCode = urlParams.get('code');
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –Ω–∞ –æ—Å–Ω–æ–≤–µ BASE_APP_URL
  let shareUrl;
  
  if (giftCode) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å gift code, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    shareUrl = `${BASE_APP_URL}?code=${giftCode}&theme=${currentTheme}&locked=true`;
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç gift code, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–º—É
    shareUrl = `${BASE_APP_URL}?theme=${currentTheme}&locked=true`;
  }
  
  console.log('Generated share URL:', shareUrl);
  return shareUrl;
}

function showFallbackShareModal() {
  const shareUrl = generateShareUrl();
  const text = `–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫–æ–π –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ${giftData.occasion.toLowerCase()} –ø–æ–¥–∞—Ä–æ–∫ —è –ø–æ–ª—É—á–∏–ª! –≠—Ç–æ –º–æ—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–µ—Å–Ω—è! üéµ‚ú®`;

  const shareOptions = [
    { name: 'üì± WhatsApp', url: `https://wa.me/?text=${encodeURIComponent(text)}%20${encodeURIComponent(shareUrl)}` },
    { name: '‚úàÔ∏è Telegram', url: `https://telegram.me/share/url?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(text)}` },
    { name: 'üîµ VKontakte', url: `https://vk.com/share.php?url=${encodeURIComponent(shareUrl)}&title=${encodeURIComponent(text)}` },
    { name: 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', action: 'copy', url: '#' }
  ];

  // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if (!shareModal) {
    createShareModal();
  }

  shareOptionsContainer.innerHTML = shareOptions.map(option => `
    <a href="${option.url}" 
       class="share-modal-btn" 
       data-action="${option.action || 'link'}"
       data-share-url="${shareUrl}">
      ${option.name}
    </a>
  `).join('');

  shareModal.classList.remove('hidden');
}

function createShareModal() {
  const modal = document.createElement('div');
  modal.id = 'share-modal';
  modal.className = 'share-modal hidden';
  modal.innerHTML = `
    <div class="share-modal-content">
      <h3 class="share-modal-title">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ–¥–∞—Ä–∫–æ–º</h3>
      <div id="share-options"></div>
      <button class="share-modal-close-btn" id="share-modal-close-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
  `;
  document.body.appendChild(modal);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  modal.querySelector('#share-modal-close-btn').addEventListener('click', () => {
    modal.classList.add('hidden');
  });
}

// Handle copy action
document.addEventListener('click', (e) => {
  const btn = e.target.closest('.share-modal-btn');
  if (btn && btn.dataset.action === 'copy') {
    e.preventDefault();
    const shareUrl = btn.dataset.shareUrl || generateShareUrl();
    
    navigator.clipboard.writeText(shareUrl).then(() => {
      localStorage.setItem('theme-locked', 'true');
      themeSwitcher.classList.add('hidden');
      
      const originalText = btn.innerHTML;
      btn.innerHTML = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
      setTimeout(() => {
        btn.innerHTML = originalText;
      }, 2500);
    });
  } else if (btn && btn.dataset.action === 'link') {
    localStorage.setItem('theme-locked', 'true');
    themeSwitcher.classList.add('hidden');
  }
});

if (shareModalCloseBtn) {
  shareModalCloseBtn.addEventListener('click', () => {
    shareModal.classList.add('hidden');
  });
}

// Enhanced download functionality
document.getElementById('download-link').addEventListener('click', (e) => {
  e.preventDefault();
  
  const downloadUrl = giftData.songUrl || DEFAULT_SONG_URL;
  const fileName = `${giftData.recipientName || '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è'}_–ø–µ—Å–Ω—è_${giftData.occasion.replace(/\s+/g, '_')}.mp3`;
  
  // –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ (S3), –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
  if (downloadUrl.startsWith('http') && !downloadUrl.includes(window.location.hostname)) {
    window.open(downloadUrl, '_blank');
  } else {
    // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª - –æ–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    const a = document.createElement('a');
    a.href = downloadUrl;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  }
  
  const btn = e.target.closest('.download-btn');
  const originalHTML = btn.innerHTML;
  btn.innerHTML = '‚úÖ';
  setTimeout(() => {
    btn.innerHTML = originalHTML;
  }, 3000);
});

// Keyboard shortcuts
document.addEventListener('keydown', (e) => {
  if (e.code === 'Space' && isOpen) {
    e.preventDefault();
    playBtn.click();
  }
  if (e.code === 'Escape' && isOpen) {
    closeSongCard();
  }
  if (e.code === 'Enter' && !isOpen) {
    openBtn.click();
  }
});

// Click envelope to open
document.getElementById('envelope').addEventListener('click', () => {
  if (!isOpen) {
    openBtn.click();
  }
});

// Initialize everything
createParticles();
initializeTheme();
